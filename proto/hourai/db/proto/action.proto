syntax = "proto2";

package hourai.db.proto;

// NEXT ID: 15
message Action {
  optional uint64 user_id   = 1;
  optional uint64 guild_id = 11;
  optional string reason    = 2;
  // Optional: duration, in seconds, after which the action is undone.
  optional uint64 duration  = 3;
  oneof details {
    KickMember kick = 4;
    BanMember ban = 5;
    EscalateMember escalate = 6;
    MuteMember mute = 12;
    DeafenMember deafen = 13;
    ChangeRole change_role = 7;
    DirectMessage direct_message = 8;
    SendMessage send_message = 9;
    DeleteMessages delete_messages = 14;
  }

  reserved 10;
}

// NEXT ID: 2
message ActionSet {
  repeated Action action = 1;
}

enum StatusType {
  APPLY = 1;
  UNAPPLY = 2;
  TOGGLE  = 3;
}

// NEXT ID: 1
message KickMember {
}

// NEXT ID: 4
message BanMember {
  enum Type {
    // Bans a user from the server.
    BAN     = 1;
    // Unbans a user from the server.
    UNBAN   = 2;
    // Bans then immediately unbans the user from the server. Useful for deleting
    // the user's messages via bans.
    SOFTBAN = 3;
  }
  // Required: if set to true, the user will immediately be unbanned following
  // the ban.
  optional Type type = 2 [default = BAN];

  // Optional: If set, the ban will delete the last X days of messages from the
  // user in the server.
  optional uint32 delete_message_days = 3 [default = 0];

  reserved 1;
}

// NEXT ID: 3
message ChangeRole {
  // Required: the direction and change that was applied.
  optional StatusType type = 1;
  // Required: the roles used by the action.
  repeated uint64 role_ids = 2;
}

// NEXT ID: 2
message MuteMember {
  optional StatusType type = 1;
}

// NEXT ID: 2
message DeafenMember {
  optional StatusType type = 1;
}

// NEXT ID: 2
message EscalateMember {
  // Required. Can be negative. If negative, will deescalate the user.
  optional int64 amount = 1 [default = 1];
}

// NEXT ID: 2
message DirectMessage {
  optional string content = 1;
}

// NEXT ID: 3
message SendMessage {
  optional string content = 1;
  optional uint64 channel_id = 2;
}

// NEXT ID: 3
message DeleteMessages {
  optional fixed64 channel_id = 1;
  repeated fixed64 message_ids = 2;
}
